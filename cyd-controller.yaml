esphome:
  name: cyd-controller
  friendly_name: CYD Controller

esp32:
  board: esp32dev
  framework:
    type: arduino      #esp-idf

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "8hSXkSNADVxy6HNXUMRL2CbaBi/93KMGoGvTTjhx7lg="

ota:
  - platform: esphome
    password: "59806caa7491c76c1eee21f0b73cd61d"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Cyd-Controller Fallback Hotspot"
    password: "4ZQHWpRZB63r"

captive_portal:
globals:
  - id: show_return_page
    type: bool
    restore_value: no
    initial_value: "false"
  - id: bcklght_timer
    type: int
    restore_value: no
    initial_value: "0"
#static int bcklght_timer = 0;

# Setup a pin to control the backlight and the LED
output:
  - platform: ledc
    pin: GPIO21
    id: backlight_pwm
  - platform: ledc
    id: output_red
    pin: GPIO4
    inverted: true
  - platform: ledc
    id: output_green
    pin: GPIO16
    inverted: true
  - platform: ledc
    id: output_blue
    pin: GPIO17
    inverted: true

light:
  - platform: monochromatic
    output: backlight_pwm
    name: Display Backlight
    id: backlight
    restore_mode: ALWAYS_ON
  - platform: rgb
    name: LED
    id: led
    red: output_red
    green: output_green
    blue: output_blue
    restore_mode: ALWAYS_OFF

# Setup SPI for the display. The ESP32-2432S028R uses separate SPI buses for display and touch
spi:
  - id: tft
    clk_pin: GPIO14
    mosi_pin: GPIO13
    miso_pin: GPIO12
  - id: touch
    clk_pin: GPIO25
    mosi_pin: GPIO32
    miso_pin: GPIO39

touchscreen:
  platform: xpt2046
  spi_id: touch
  cs_pin: GPIO33
  interrupt_pin: GPIO36
  update_interval: 50ms
  threshold: 400
  calibration:
    x_min: 410
    x_max: 3750
    y_min: 280
    y_max: 3710
  transform:
    mirror_x: True
    mirror_y: False
    swap_xy: False   

# Create a font to use, add and remove glyphs as needed. 
# Crea las fuente que quieres utilizar, añade o quita los caracteres que necesites.

font:
  - file: "gfonts://Coming Soon"
    id: fecha
    size: 15
  - file: "gfonts://Coming Soon"
    id: hora
    size: 58
  - file: "gfonts://Handlee"
    id: info
    size: 15
  - file: "gfonts://Handlee"
    id: botones
    size: 11

# Create the colors you want to use.
# Crea los colores que quieres utilizar.

#color:
#  - id: black
#    hex: '000000'
#  - id: orange
#    hex: '16afd9'
#  - id: grey
#    hex: '464646'
#  - id: red
#    hex: 'ff0000'
    
# Create the icons you want to use.
# Crea los iconos que quieres utilizar.

image:
  - file: mdi:alarm-light
    id: alarmicon
    resize: 40x40
    type: BINARY  
  - file: mdi:alarm-light-outline
    id: alarmicon_outline
    resize: 40x40
    type: BINARY      
  - file: mdi:home-thermometer
    id: hometemperature
    resize: 40x40
    type: BINARY
  - file: mdi:weather-partly-cloudy
    id: weather
    resize: 40x40
    type: BINARY
  - file: mdi:flash
    id: flash
    resize: 40x40
    type: BINARY
  - file: mdi:heart-pulse
    id: health
    resize: 40x40
    type: BINARY
  - file: mdi:page-previous
    id: back
    resize: 40x40
    type: BINARY
  - file: mdi:lightbulb-spot
    id: lightbulb_spot
    resize: 40x40
    type: BINARY
  - file: mdi:lightbulb
    id: lightbulb
    resize: 40x40
    type: BINARY
  - file: mdi:led-strip-variant
    id: led_strip_variant
    resize: 40x40
    type: BINARY
  - file: mdi:fan
    id: fan
    resize: 40x40
    type: BINARY
  - file: mdi:desk
    id: desk
    resize: 40x40
    type: BINARY
  - file: mdi:television
    id: television
    resize: 40x40
    type: BINARY
  - file: mdi:dishwasher
    id: dishwasher
    resize: 40x40
    type: BINARY
  - file: mdi:page-next
    id: next
    resize: 40x40
    type: BINARY
    
# Replace the home gif as you want.
# Reemplaza el gif the inicio como quieras.

#animation:
#  - file: "habbit.gif"
#    id: ha
#    resize: 70x70
#    type: TRANSPARENT_BINARY

# This will fetch time from Home Assistant
time:
  - platform: homeassistant
    id: esptime

# Create sensors from HA you want to use and show.
# Crea los sensores de HA que quieres utilizar y mostrar.
# MrMr rivedere nomi sensori
sensor:
  - platform: homeassistant
    id: temperatura
    entity_id: sensor.temperatura_media_casa
    internal: true
  - platform: homeassistant
    id: umidita
    entity_id: sensor.umidita_media_casa
    internal: true
  - platform: homeassistant
    id: potenza
    entity_id: sensor.monitor_potenza_consumata_power_a
    internal: true


text_sensor:
  - platform: homeassistant
    id: Finestra_Cucina
    entity_id: binary_sensor.finestra_cucina_contact
    internal: true
  - platform: homeassistant
    id: Portone
    entity_id: binary_sensor.portone_contact
    internal: true
  - platform: homeassistant
    id: faretti_corridoio
    entity_id: light.faretti_corridoio
    internal: true
  - platform: homeassistant
    id: luce_camera_filippo
    entity_id: light.luce_camera_filippo
    internal: true
  - platform: homeassistant
    id: sp530e_strip
    entity_id: light.sp530e_strip
    internal: true
  - platform: homeassistant
    id: aspiratore
    entity_id: fan.aspiratore_bagno
    internal: true
  - platform: homeassistant
    id: televisore
    entity_id: switch.televisore
    internal: true
  - platform: homeassistant
    id: scrivania
    entity_id: switch.presascrivania
    internal: true
  - platform: homeassistant
    id: lavastoviglie
    entity_id: switch.lavastoviglie
    internal: true    

# Assigns a function to each button, by calling the corresponding service in HA.
# Asigna una función a cada botón, llamando al servicio correspondiente en HA.

binary_sensor:
  - platform: touchscreen
    name: Button 1
    x_min: 15
    x_max: 115
    y_min: 5
    y_max: 70
    on_press:
      then:
        - if:
            condition:
              lambda: 'return !id(show_return_page);'
            then:
              - light.turn_on: backlight
              - globals.set:
                  id: show_return_page
                  value: !lambda "return !id(show_return_page);"
            else:
              - homeassistant.service:
                  service: light.toggle
                  data:
                    entity_id: light.faretti_corridoio
  - platform: touchscreen
    name: Button 2
    x_min: 125
    x_max: 225
    y_min: 5
    y_max: 70
    on_press:
      then:
        - if:
            condition:
              lambda: 'return !id(show_return_page);'
            then:
              - light.turn_on: backlight
              - globals.set:
                  id: show_return_page
                  value: !lambda "return !id(show_return_page);"
            else:
              - homeassistant.service:
                  service: light.toggle
                  data:
                    entity_id: light.luce_camera_filippo
  - platform: touchscreen
    name: Button 3
    x_min: 15
    x_max: 115
    y_min: 80
    y_max: 145
    on_press:
      then:
        - if:
            condition:
              lambda: 'return !id(show_return_page);'
            then:
              - light.turn_on: backlight
              - globals.set:
                  id: show_return_page
                  value: !lambda "return !id(show_return_page);"
            else:
              - homeassistant.service:
                  service: light.toggle
                  data:
                    entity_id: light.sp530e_strip
                    brightness: '255'
              - homeassistant.action:                    
                  action: select.select_option
                  data:
                    entity_id: select.sp530e_light_mode
                    option: Static White
  - platform: touchscreen
    name: Button 4
    x_min: 125
    x_max: 225
    y_min: 80
    y_max: 145
    on_press:
      then:
        - if:
            condition:
              lambda: 'return !id(show_return_page);'
            then:
              - light.turn_on: backlight
              - globals.set:
                  id: show_return_page
                  value: !lambda "return !id(show_return_page);"
            else:
              - homeassistant.service:
                  service: fan.toggle
                  data:
                    entity_id: fan.aspiratore_bagno
  - platform: touchscreen
    name: Button 5
    x_min: 15
    x_max: 115
    y_min: 155
    y_max: 220
    on_press:
      then:
        - if:
            condition:
              lambda: 'return !id(show_return_page);'
            then:
              - light.turn_on: backlight
              - globals.set:
                  id: show_return_page
                  value: !lambda "return !id(show_return_page);"
            else:
              - homeassistant.service:
                  service: switch.toggle
                  data:
                    entity_id: switch.presascrivania
  - platform: touchscreen
    name: Button 6
    x_min: 125
    x_max: 225
    y_min: 155
    y_max: 220
    on_press:
      then:
        - if:
            condition:
              lambda: 'return !id(show_return_page);'
            then:
              - light.turn_on: backlight
              - globals.set:
                  id: show_return_page
                  value: !lambda "return !id(show_return_page);"
            else:
              - homeassistant.service:
                  service: switch.toggle
                  data:
                    entity_id: switch.televisore
  - platform: touchscreen
    name: Button 7
    x_min: 15
    x_max: 115
    y_min: 230
    y_max: 295
    on_press:
      then:
        - if:
            condition:
              lambda: 'return !id(show_return_page);'
            then:
              - light.turn_on: backlight
              - globals.set:
                  id: show_return_page
                  value: !lambda "return !id(show_return_page);"
            else:
              - homeassistant.service:
                  service: switch.toggle
                  data:
                    entity_id: switch.lavastoviglie
  - platform: touchscreen
    name: Button 8
    x_min: 125
    x_max: 225
    y_min: 230
    y_max: 295
    on_press:
      then:
        - light.turn_on: backlight
        - globals.set:
            id: show_return_page
            value: !lambda "return !id(show_return_page);id(bcklght_timer) = 0;"

# Setup the ili9xxx platform
# Display is used as 240x320 by default so we rotate it to 90°

display:
  - platform: ili9xxx
    id: esp_display
    model: ILI9341
    spi_id: tft
    cs_pin: GPIO15
    dc_pin: GPIO2
    color_palette: 8BIT
    rotation: 0
    invert_colors: False
    lambda: |-
      auto blue = Color(0, 0, 255);
      auto rosso = Color(255, 0, 0);
      auto nero = Color(0, 0, 0);
      auto grigio = Color(128,128,128);
      if(id(Portone).state == "on")
        id(show_return_page) = false;
      if (id(show_return_page)) {
        int button_width = 100;
        int button_height = 65;
        int x_start = 15;
        int y_start = 15;
        int x_padding = 10;
        int y_padding = 10;

        // Define los textos para los botones
        const char* button_texts[] = {
          "Corridoio",
          "Camera F.",
          "Led Tv",
          "Asp.Bagno",
          "Scrivania",
          "Televisore",
          "Lavastoviglie",
          "Indietro"
        };

        for (int row = 0; row < 4; row++) {
          for (int col = 0; col < 2; col++) {
            int button_index = row * 2 + col;
            int x = x_start + col * (button_width + x_padding);
            int y = y_start + row * (button_height + y_padding);
            it.rectangle(x, y, button_width, button_height, grigio);
            int text_width = strlen(button_texts[button_index]) * 5.5; 
            int text_height = 16; 
            it.print(x + (button_width - text_width) / 2, y + (button_height - text_height) / 2 + 20, id(botones), button_texts[button_index]);
          }
        }
        if (id(faretti_corridoio).state == "on") {
          it.image(45, 20, id(lightbulb_spot), rosso);
        } else {
          it.image(45, 20, id(lightbulb_spot), grigio);
        }
        if (id(luce_camera_filippo).state == "off") {
          it.image(155, 20, id(lightbulb), grigio);
        } else {
          it.image(155, 20, id(lightbulb), rosso);
        }
        if (id(sp530e_strip).state == "off") {
          it.image(45, 95, id(led_strip_variant), grigio);
        } else {
          it.image(45, 95, id(led_strip_variant), rosso);
        }
        if (id(aspiratore).state == "on") {
          it.image(155, 95, id(fan), rosso);
        } else {
          it.image(155, 95, id(fan), grigio);
        }
        if (id(scrivania).state == "on") {
          it.image(45, 170, id(desk), rosso);
        } else {
          it.image(45, 170, id(desk), grigio);
        }
        if (id(televisore).state == "on") {
          it.image(155, 170, id(television), rosso);
        } else {
          it.image(155, 170, id(television), grigio);
        }
        if (id(lavastoviglie).state == "on") {
          it.image(45, 245, id(dishwasher), rosso);
        } else {
          it.image(45, 245, id(dishwasher), grigio);
        }
        it.image(155, 245, id(back), grigio);

      } else {
        static int y = 150;
        static int y_direction = 4;  // Velocidad del movimiento
        const int y_min = 145;       
        const int y_max = 155;       
        static int current_text_index = 0;
        static float text_timer = 0;
        it.fill(nero);
        auto call = id(led).turn_off();
        call.perform();
        if(id(esptime).now().is_valid())
        {
          it.strftime(120, 60, id(fecha), TextAlign::CENTER, "%d/%m/%Y", id(esptime).now());
          it.strftime(120, 100, id(hora), TextAlign::CENTER, "%H:%M", id(esptime).now());
          if(id(Portone).state == "on" )
          {
            id(bcklght_timer) = 0;
            auto call = id(backlight).turn_on();
            //perform action...
            call.perform();

            if (current_text_index == 0 || current_text_index == 2)
            {
              it.image(100, 140, id(alarmicon), rosso);
              auto call = id(led).turn_on();
              call.set_rgb(1.0, 0.0,0.0);
              call.perform();
            }
            else
            {
              it.image(100, 140, id(alarmicon_outline), rosso);
            }
          }
        }
        y += y_direction;
        if (y <= y_min || y >= y_max) {
          y_direction = -y_direction;
        }


        
        const float text_interval = 1.0;  // Intervalo para cambiar el texto en segundos
        
        const int bcklght_interval = 30;  // Intervallo spengimento bcklght
        text_timer += 1.0;
        id(bcklght_timer) ++;  
        if (text_timer >= text_interval) {
          text_timer = 0;
          current_text_index = (current_text_index + 1) % 4;  // Alternar entre cuatro textos
        }
        if (id(bcklght_timer) >= bcklght_interval) {
          id(bcklght_timer) = 0;
          auto call = id(backlight).turn_off();
          //perform action...
          call.perform();
        }
        if (current_text_index == 0 || current_text_index == 1) {
          it.image(15, 260, id(hometemperature), rosso);
          it.print(70, 260, id(info), "Temperatura");
          it.printf(175, 260, id(info), "%.1f C", id(temperatura).state);
          it.print(70, 280, id(info), "Umidita'");
          it.printf(175, 280, id(info), "%.1f %%", id(umidita).state);
        } else if (current_text_index == 3 || current_text_index == 2) {
          it.image(15, 260, id(flash), rosso);
          it.print(70, 260, id(info), "Potenza");
          it.printf(175, 260, id(info), "%.1f W", id(potenza).state);
        } 
      }

#interval:
#  - interval: 30s
#    then:
#      - light.turn_off: backlight